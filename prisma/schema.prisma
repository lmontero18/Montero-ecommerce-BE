generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]  
}

model Category {
  id       Int               @id @default(autoincrement())
  name     String            @unique
  products ProductCategory[]

  @@map("categories")
}

model Product {
  id            Int               @id @default(autoincrement())
  uuid          String            @unique @default(uuid())
  name          String
  description   String
  price         Float
  originalPrice Float
  discount      Float
  rating        Float
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  deletedAt     DateTime?         @map("deleted_at")
  categories    ProductCategory[]
  variants      ProductVariant[]
  images        ProductImage[] 

  @@map("products")
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  uuid      String  @unique @default(uuid())
  productId Int
  size      String
  color     String
  stock     Int
  sku       String  @unique
  product   Product @relation(fields: [productId], references: [id])
  orderItems OrderItem[]

  @@unique([productId, size, color])
  @@map("product_variants")
}

model ProductCategory {
  id         Int      @id @default(autoincrement())
  productId  Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([productId, categoryId])
  @@map("product_categories")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  product   Product  @relation(fields: [productId], references: [id])

  @@map("product_images")
}
model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  status    OrderStatus @default(PENDING)
  total     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]

  @@map("orders")
}


model OrderItem {
  id               Int             @id @default(autoincrement())
  orderId          Int
  productVariantId Int
  quantity         Int
  price            Float

  order            Order           @relation(fields: [orderId], references: [id])
  variant          ProductVariant  @relation(fields: [productVariantId], references: [id])

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  FAILED
}

